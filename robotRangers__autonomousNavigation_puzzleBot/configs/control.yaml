#Adding a robot name here is possible if required, it will only add to the begining
#of the topic name. So, if "jackal" was the robot name
#jackal:
#Then the topics below will be:
#jackal/jackal_velocity_controller/cmd_vel
puzzlebot_joint_publisher:
  type: "joint_state_controller/JointStateController"
  publish_rate: 50

#This namespace (jackal_velocity_controller) will generate 4 topics 
#when the launch file is executed (controller spawner)
#Only if the controller name is added in the launch file args:
#/jackal_velocity_controller/cmd_vel
#/jackal_velocity_controller/odom
#/jackal_velocity_controller/parameter_descriptions
#/jackal_velocity_controller/parameter_updates
#This topics are created because this is a differential controller.
#If we used an effort controller I would have 4 different topics
#robot_name/controller_name/command
#robot_name/controller_name/pid/parameter_description
#robot_name/controller_name/pid/parameter_updates
#robot_name/controller_name/state
jackal_velocity_controller:
  type: "diff_drive_controller/DiffDriveController"
  #Make sure that in the URDF file the gazebo ros controller plugin (below) is being loaded
  #<gazebo>
  #  <plugin name="gazebo_ros_control" filename="libgazebo_ros_control.so">
  #    <robotNamespace>/</robotNamespace>
  #  </plugin>
  #</gazebo>
  left_wheel: ['front_left_wheel', 'rear_left_wheel'] #Names must match urdf file joints names
  right_wheel: ['front_right_wheel', 'rear_right_wheel'] #Names must match urdf file joints names
  #To check that convert from xacro to urdf using the following command: 
  #xacro urdf/jackal.urdf.xacro > jackal.urdf 
  #And check URDF file for joint names
  #Also, check that each of the joints has a transmission in the URDF file
  publish_rate: 10
  pose_covariance_diagonal: [0.001, 0.001, 1000000.0, 1000000.0, 1000000.0, 0.03]
  twist_covariance_diagonal: [0.001, 0.001, 0.001, 1000000.0, 1000000.0, 0.03]
  cmd_vel_timeout: 0.25

  k_l: 0.1
  k_r: 0.1

  # If sensors aren't fused then this needs to be true, so gazebo publishes the 
  # odom TF and the map can be conected to the base_link of the robot
  # If odometry is fused with IMU (encoders + imu) then the odometry TF 
  # is published by robot_localization, so no need to publish a TF based on 
  # encoders alone.
  enable_odom_tf: true

  # Wheel separation and radius multipliers
  wheel_separation_multiplier: 1.5 # default: 1.0
  wheel_radius_multiplier    : 1.0 # default: 1.0

  allow_multiple_cmd_vel_publishers: True #Because of twist_markers and move_base

  # Velocity and acceleration limits
  # Whenever a min_* is unspecified, default to -max_*
  linear:
    x:
      has_velocity_limits    : true
      max_velocity           : 2.0   # m/s
      has_acceleration_limits: true
      max_acceleration       : 20.0   # m/s^2
  angular:
    z:
      has_velocity_limits    : true
      max_velocity           : 4.0   # rad/s
      has_acceleration_limits: true
      max_acceleration       : 25.0   # rad/s^2